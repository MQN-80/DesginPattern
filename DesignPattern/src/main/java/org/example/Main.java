package org.example;
import AbstractFactoryPattern.Test;
import AdapterPattern.Client;
import BlackBoardPattern.BulletinBoard;
import BridgePattern.BridgeClient;
import Builderpattern.BuildClient;
import CallbackPattern.callBackClient;
import ChainofResponsibilityPattern.ChainoClient;
import CommandPattern.CommandClient;
import CompositePattern.CompositeClient;
import ConverterPattern.converterClient;
import DecoratePattern.DecoratorClient;
import Delegation.delegationClient;
import DependencyInjectionPattern.injectionClient;
import FacadePattern.TheaterClient;
import FactoryPattern.factoryClient;
import FlyweightPattern.flyweightClient;
import InterpreterPattern.interpreterClient;
import IteratorPattern.iteratorClient;
import MediatorPattern.MediatorClient;
import MementoPattern.Player;
import NullObjectPattern.nullClient;
import ObserverPattern.observerClient;
import ProtoPattern.protoClient;
import ProxyPattern.ProxyClient;
import QueuePattern.queueClient;
import RegistryPattern.registyPattern;
import SingletonPattern.singlePattern;
import SpecificationPattern.specificationPattern;
import StatePattern.stateClient;
import StrategyPattern.StrategyTest;
import TemplateMethodPattern.templateTest;
import VisitorPattern.visitorTest;

public class Main {
    public static void main(String[] args) throws Exception {
        Test a=new Test();
        a.main(args);
        Client adapter=new Client();
        adapter.main(args);
        BulletinBoard board=new BulletinBoard();
        board.main(args);
        BridgeClient bridgeClient=new BridgeClient();
        bridgeClient.main(args);
        BuildClient buildClient=new BuildClient();
        buildClient.main(args);
        callBackClient callBackClient=new callBackClient();
        callBackClient.main(args);
        ChainoClient chainoClient=new ChainoClient();
        chainoClient.main(args);
        CommandClient commandClient=new CommandClient();
        commandClient.main(args);
        CompositeClient compositeClient=new CompositeClient();
        compositeClient.main(args);
        converterClient converterClient=new converterClient();
        converterClient.main(args);
        DecoratorClient decoratorClient=new DecoratorClient();
        decoratorClient.main(args);
        delegationClient delegationClient=new delegationClient();
        delegationClient.main(args);
        injectionClient injectionClient=new injectionClient();
        injectionClient.main(args);
        TheaterClient theaterClient=new TheaterClient();
        theaterClient.main(args);
        factoryClient factoryClient=new factoryClient();
        factoryClient.main(args);
        flyweightClient flyweightClient=new flyweightClient();
        flyweightClient.main(args);
        interpreterClient interpreterClient=new interpreterClient();
        interpreterClient.main(args);
        iteratorClient iteratorClient=new iteratorClient();
        iteratorClient.main(args);
        MediatorClient mediatorClient=new MediatorClient();
        mediatorClient.main(args);
        Player player=new Player();
        player.main(args);
        nullClient nullClient=new nullClient();
        nullClient.main(args);
        observerClient observerClient=new observerClient();
        observerClient.main(args);
        protoClient protoClient=new protoClient();
        protoClient.main(args);
        ProxyClient proxyClient=new ProxyClient();
        proxyClient.main(args);
        queueClient queueClient=new queueClient();
        queueClient.main(args);
        registyPattern registyPattern=new registyPattern();
        registyPattern.main(args);
        singlePattern singlePattern=new singlePattern();
        singlePattern.main(args);
        specificationPattern specificationPattern=new specificationPattern();
        specificationPattern.main(args);
        stateClient stateClient=new stateClient();
        stateClient.main(args);
        StrategyTest strategyTest=new StrategyTest();
        strategyTest.main(args);
        templateTest templateTest=new templateTest();
        templateTest.main(args);
        visitorTest visitorTest=new visitorTest();
        visitorTest.main(args);
    }

}